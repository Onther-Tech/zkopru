model EncryptedWallet {
  id String @id @default(uuid())
  ciphertext String
  iv String
  algorithm String
  keylen Int
  kdf String
  N Int
  r Int
  p Int
  salt String
}

model Keystore {
  address String @id
  zkAddress String
  encrypted String // stringified json
}

model Config {
  id String @unique
  networkId Int
  chainId Int
  address String
  utxoTreeDepth Int
  withdrawalTreeDepth Int
  layer2TreeDepth Int
  nullifierTreeDepth Int
  challengePeriod Int
  minimumStake String
  referenceDepth Int
  maxUtxo String
  maxWithdrawal String
  utxoSubTreeDepth Int
  utxoSubTreeSize Int
  withdrawalSubTreeDepth Int
  withdrawalSubTreeSize Int
  layer2SubTreeDepth Int
  layer2SubTreeSize Int
  @@id([networkId, chainId, address])
}

model Tracker {
  id Int @id @default(autoincrement())
  viewer String? @unique
  address String? @unique
}

model Proposal {
  hash String @id
  proposalNum Int?
  proposedAt Int?
  proposalTx String? // tx hash
  proposalData String? // stringified json
  fetched String?
  finalized Boolean?
  verified Boolean?
  isUncle Boolean?
  block Block? @relation(fields: [fetched], references: [hash])
}

model Block {
  hash String @id
  header Header @relation(fields: [hash], references: [hash])
  proposal Proposal?
  bootstrap Bootstrap?
  slash Slash?
}

model Slash {
  hash String @id
  proposer String
  reason String
  executionTx String
  slashedAt Int
  block Block @relation(fields: [hash], references: [hash])
}

model Header {
  hash String @id
  proposer String
  parentBlock String
  fee String
  utxoRoot String
  utxoIndex String
  nullifierRoot String
  withdrawalRoot String
  withdrawalIndex String
  layer2Root String
  layer2Index String
  txRoot String
  depositRoot String
  migrationRoot String
}

model Bootstrap {
  id String @id @default(uuid())
  blockHash String? @unique
  // utxoBootstrap String[]
  utxoBootstrap String // jsonified arr : sqlite does not support arr
  // withdrawalBootstrap String[]
  withdrawalBootstrap String //jsonified arr : sqlite does not support arr
  layer2Bootstrap String //jsonified arr : sqlite does not support arr
  block Block? @relation(fields: [blockHash], references: [hash])
}

model MassDeposit {
  index String @id
  merged String
  fee String
  blockNumber Int
  includedIn String?
}

model Deposit {
  note String @id
  fee String
  transactionIndex Int
  logIndex Int
  blockNumber Int
  queuedAt String
}

model Utxo {
  hash String @id
  eth String?
  owner String?
  salt String?
  tokenAddr String?
  erc20Amount String?
  nft String?
  status Int?
  treeId String?
  index String?
  nullifier String?
  usedAt String?
}

model Withdrawal {
  hash String @id
  withdrawalHash String
  eth String
  owner String?
  salt String?
  tokenAddr String
  erc20Amount String
  nft String
  to String
  fee String
  status Int?
  treeId String?
  index String?
  includedIn String?
  prepayer String?
  siblings String? // stringified str[]
}

model Layer2 {
  hash String @id
  layer2Hash String
  eth String
  owner String?
  salt String?
  tokenAddr String
  erc20Amount String
  nft String
  layer2 String
  to String
  fee String
  status Int?
  treeId String?
  index String?
  includedIn String?
  prepayer String?
  siblings String? // stringified str[]
}

model Migration {
  hash String @id
  eth String?
  owner String?
  salt String?
  tokenAddr String?
  erc20Amount String?
  nft String?
  to String?
  fee String?
  status Int?
  treeId String?
  index String?
  usedFor String?
}

model TreeNode {
  treeId String
  nodeIndex String
  value String
  // tree UtxoTree @relation(fields: [treeId], references: [id])
  @@id([treeId, nodeIndex])
}

model LightTree {
  id String @default(uuid()) @unique
  species Int @unique // 0: utxo 1: withdrawal
  // rollup sync data
  start String
  end String
  // rollup snapshot data
  root String
  index String
  siblings String // stringified str[]
}

model TokenRegistry {
  address String @id
  isERC20 Boolean
  isERC721 Boolean
  identifier Int
  blockNumber Int
}
